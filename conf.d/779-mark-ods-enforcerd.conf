filter {
  if [type] == "syslog" or [type] == "cee" and [syslog][identifier] == "ods-enforcerd" {
    mutate {
      add_field => { "application" => "IPA" }
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      add_tag => [ "Known Message", "Benign" ]
      tag_on_failure => [ ]
      match => { "message" => [
        "^%{INT} zone\(s\) found on policy \"%{DATA}\"$",
        "^(Disc|C)onnecting (from|to) Database\.\.\.$",
        "^Communication Interval: %{INT}$",
        "^Config will be output to %{NOTSPACE}\.$",
        "^HSM connection open\.$",
        "^Key sharing is Off\.$",
        "^Log User set to: local0$",
        "^No DS Submit command supplied$",
        "^No change to: %{NOTSPACE}$",
        "^No new [KZ]SKs need to be created\.$",
        "^No zones on policy default, skipping...$",
        "^No zones on policy default, skipping\.\.\.$",
        "^Policy default found\.$",
        "^Policy for %{NOTSPACE} set to default\.$",
        "^Purging keys\.\.\.$",
        "^Reading config \"%{NOTSPACE}\"$",
        "^Reading config schema \"%{NOTSPACE}\"$",
        "^Received SIGTERM, exiting...$",
        "^SQLite database set to: %{NOTSPACE}$",
        "^Sleeping for %{INT} seconds\.$",
        "^Switched log facility to: local0$",
        "^WARNING: New KSK has reached the ready state; please submit the DS for %{NOTSPACE} and use ods-ksmutil key ds-seen when the DS appears in the DNS\.$",
        "^Zone %{NOTSPACE} found\.$",
        "^all done! hsm_close result: 0$",
        "^zonelist filename set to %{NOTSPACE}\.$"
      ] }
    }
#    if "Known Message" not in [tags] and "Benign" not in [tags] {
#      grok {
#        patterns_dir => [ "/etc/logstash/patterns.d/" ]
#        tag_on_failure => [ ]
#        add_tag => [ "Known Message","Error" ]
#        match => { "message" => [
#          "^$"
#        ] }
#      }
#    }
#    if "Benign" not in [tags] and "Known Message" not in [tags] {
#      grok {
#        patterns_dir => [ "/etc/logstash/patterns.d/" ]
#        tag_on_failure => [ ]
#        add_tag => [ "Alert", "Known Message"]
#        match => { "message" => [
#          "^$"
#        ] }
#      }
#    }
  }
}
