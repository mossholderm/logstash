filter {
  if [syslog][identifier] == "systemd" {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      add_tag => [ "Known Message", "Benign" ]
      match => { "message" => [
        "^St(art|opp)ed \(Docker Application Container Engine|docker container %{BASE16NUM}\)\.$"
      ] }
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      add_tag => [ "Known Message", "Error" ]
      match => { "message" => [
        "^Scope libcontainer-%{INT}-systemd-test-default-dependencies\.scope has no PIDs\. Refusing\.$",
        "^Error response from daemon: Cannot start container %{DATA}: Error getting container %{BASE16NUM} from driver devicemapper: open /dev/mapper/docker-%{INT}:%{INT}-%{INT}-%{BASE16NUM}: no such file or directory$",
        "^Failed to start %{DATA} container\.$"
      ] }
    }
  }
  if [syslog][identifier] == "docker-storage-setup" {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      add_tag => [ "Known Message", "Benign" ]
      match => { "message" => [
      ] }
    }
  }


#
#
# DOCKER - GUACAMOLE SERVER
#
#
  if [type] == "docker" and [syslog][identifier] == "guacamole" {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      overwrite => [ "message" ]
      match => { "message" => [
        "^%{HOUR}:%{MINUTE}:%{SECOND}\.%{MILLISECOND} \[%{DATA:[guacamole][object]}\] %{GUAC_LEVEL} %{DATA:[message]}$",
        "^%{MONTHDAY}-%{MONTH}-%{YEAR} %{HOUR}:%{MINUTE}:%{SECOND}\.%{MILLISECOND} %{GUAC_LEVEL} \[%{DATA:[guacamole][object]}\] %{DATA:[message]}$"
      ] }
    }
    mutate {
      copy => { "message" => "guac_message" }
    }
    if [guacamole][level] == "INFO" {
      mutate {
        add_tag => [ "Known Message", "Benign" ]
      }
    }
    if [guacamole][level] =~ /WARN(ING)?/ {
      mutate {
        add_tag => [ "Known Message", "Warning" ]
      }
    }
    if [guacamole][level] == "ERROR" or [guacamole][level] == "SEVERE" {
      mutate {
        add_tag => [ "Known Message", "Error" ]
      }
    }
  }

#
#
# DOCKER - GUACD
#
#
  if [type] == "docker" and [syslog][identifier] == "guacd" {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      overwrite => [ "message" ]
      match => { "message" => [
        "^guacd\[%{POSINT:[docker][pid]}\]: %{NOTSPACE:[guacd][level]}:%{SPACE}%{DATA:[message]}$"
      ] }
    }
    if [guacd][level] == "INFO" {
      mutate {
        add_tag => [ "Known Message", "Benign" ]
      }
    }
    if [guacd][level] == "WARN" {
      mutate {
        add_tag => [ "Known Message", "Warning" ]
      }
    }
    if [guacd][level] == "ERROR" {
      mutate {
        add_tag => [ "Known Message", "Error" ]
      }
    }
  }

#
#
# DOCKER - NEXTCLOUD
#
#

  if [type] == "docker" and [syslog][identifier] == "nextcloud" {
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      add_tag => [ "Known Message", "Benign" ]
      match => { "message" => [
        "^Done updating permissions\.$",
        "^Permissions in %{FILENAME_SRC} are correct\.$",
        "^Updating permissions in %{FILENAME_DST}\.\.\.$",
        "^Updating permissions\.\.\.$"
      ] }
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      add_tag => [ "Known Message", "Error" ]
      match => { "message" => [
        "^#%{POSINT} %{FILENAME_SRC}\(%{LINE_NUMBER}\): %{DATA}$",
        "^PHP Fatal error: %{DATA}$",
        "^Stack trace:$"
      ] }
    }
  }

#
#
# DOCKER - ZABBIX SERVER
#
#

  if [type] == "docker" and [syslog][identifier] == "zabbix-server" {

    if [message] =~ /DEBG 'zabbix-server' stdout output:$/ or 
       [message]=~/fping failed: no output$/ {
      drop { } 
    }

    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      overwrite => [ "message" ]
      match => { "message" => [
        "^%{POSINT:[docker][pid]}:%{ZABBIX_TIMESTAMP} %{DATA:message}$",
        "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME},%{INT} %{DATA:message}$"
      ] }
    }
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      add_tag => [ "Known Message", "Benign" ]
      match => { "message" => [
        "^ \*\*\*\*\*\* Enabled features \*\*\*\*\*\*$",
        "^%{DATA}: (YES|NO)$",
        "^Starting Zabbix Server\. Zabbix [0-9.]+ Dockbix XXL \(%{YEAR}-%{MONTHNUM}-%{MONTHDAY}\) \(revision %{POSINT}\)\.$",
        "^\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*$",
        "^current database version \(mandatory\/optional\): %{POSINT}\/%{POSINT}$",
        "^enabling SNMP agent checks on host \"%{HOST_DST}\": host became available$", 
        "^executing housekeeper$",
        "^housekeeper \[deleted %{INT} hist\/trends, %{INT} items\/triggers, %{INT} events, %{INT} problems, %{INT} sessions, %{INT} alarms, %{INT} audit items in %{BASE10NUM} sec, idle for %{INT} hour\(s\)\]$",
        "^item \"%{HOST_DST}:%{NOTSPACE}\" became supported$",
        "^required mandatory version: %{POSINT}$",
        "^resuming (SNMP|Zabbix) agent checks on host \"%{HOST_DST}\": connection restored $",
        "^server #%{POSINT} started \{%{DATA}\]$",
        "^using configuration file: %{FILENAME_SRC}$"
      ] }
    }

    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      tag_on_failure => [ ]
      add_tag => [ "Known Message", "Warning" ]
      match => { "message" => [
        "^DEBG received SIGCLD indicating a child quit$",
        "^INFO reaped unknown pid %{PID}$",
        "^failed to send email: Couldn't resolve host name: Could not resolve host: %{HOST_DST}; Name or service not known$",
        "^fping failed: %{IP_DST} : \[%{POSINT}\], %{POSINT} bytes, %{POSINT} ms \(%{POSINT} avg, %{POSINT}% loss\)$",
        "^fping failed: ICMP Host Unreachable from %{IP_SRC} for ICMP Echo sent to %{IP_DST}$",
        "^SNMP agent item \"%{NOTSPACE}\" on host \"%{HOST_DST}\" failed: first network error, wait for %{POSINT} seconds$",
        "^Zabbix agent item \"%{DATA:[zabbix][item]}\" on host \"%{HOST_SRC}\" failed: first network error, wait for 15 seconds$",
        "^fping failed: %{HOST_DST}: Name or service not known$" 
      ] }
    }
  }
}
