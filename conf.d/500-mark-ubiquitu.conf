filter {
  if ( [type] == "syslog" or [type] == "cee" and [syslog][hostname] =~ /\(\"US\d+P\d+,[0-9a-f]+,v[0-9.]+\"\)/ ) {
    mutate {
      add_field => { "application" => "Ubiquiti" }
      replace => { "type" => "syslog" }
    }
    if [syslog][identifier] == "switch" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^DOT1S: dot1sBpduReceive\(\): Invalid Forward Delay$",
          "^DOT1S: dot1sBpduReceive\(\): Discarding the BPDU, since it is an invalid BPDU type$"
        ] }
      }
    }
  }
  if ( [type] == "syslog" or [type] == "cee" and [syslog][hostname] =~ /\(\"U[^ ,]+,[0-9a-f]+,v[0-9.]+\"\)/ ) {
    mutate {
      add_field => { "application" => "Ubiquiti" }
      replace => { "type" => "syslog" }
    }
    if [syslog][identifier] == "crond" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^crond: USER admin pid \d+ cmd syswrapper\.sh refresh-walled-garden 1$"
        ] }
      }
    }
    if [syslog][identifier] == "hostapd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: did not acknowledge authentication response$",
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: disconnected due to excessive missing ACKs$",
          "^%{INTF_DST}: STA %{MAC_SRC} WPA: received EAPOL-Key with invalid MIC$",
          "^process '/bin/stamgr -i 1 ' \(pid %{POSINT:[syslog][pid]}\) exited\. Scheduling for restart\.$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^%{INTF_DST}: STA %{MAC_SRC} DRIVER: Sead AUTH addr=%{MAC} status_code=0$",
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: associated( \(aid \d+\))?$",
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: authenticated$",
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: deauthenticated due to (local deauth request|inactivity \(timer DEAUTH/REMOVE\))$",
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: disassociated( due to inactivity)?$",
          "^%{INTF_DST}: STA %{MAC_SRC} IEEE 802\.11: sta_stats$",
          "^%{INTF_SRC}: STA %{MAC_SRC} WPA: pairwise key handshake completed (RSN)$",
          "^%{INTF_DST}: STA %{MAC_SRC} RADIUS: starting accounting session [0-9A-F-]+$",
          "^%{INTF_DST}: STA %{MAC_SRC} WPA: (pairwise|group) key handshake completed \(RSN\)$",
          "^Child connection from %{IP_SRC}:%{PORT_SRC}$",
          "^reloading /etc/inittab$",
          "^starting pid %{POSINT:[syslog][pid]}, tty '/dev/null': '/bin/stamgr -i 1 '$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_field => { "[host][src][wifi-state]" => "Associated" }
        match => { "message" => [ 
          "^%{INTERFACENAME}: STA %{MAC} IEEE 802\.11: associated( \(aid \d+\))?$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_field => { "[host][src][wifi-state]" => "Disassociated" }
        match => { "message" => [ 
          "^%{INTERFACENAME}: STA %{MAC} IEEE 802\.11: disassociated( due to inactivity)?$"
        ] }
      }
    } else if [syslog][identifier] == "kernel" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^\[\s*\d+\.\d+\] %{INTF_SRC}: received packet on %{INTERFACENAME} with own address as source address$",
          "^\[\s*\d+\.\d+\] ((badsta\? \(atf descs %{MAC_SRC} \d+\) )+)?(\[%{INTF_SRC}\] )?FWLOG: \[%{INT}\] WAL_DBGID_BB_WDOG_TRIGGERED \( %{BASE16NUM}, %{BASE16NUM}, 0x0, %{BASE16NUM} \)$",
          "^\[\s*\d+\.\d+\] ((badsta\? \(atf descs %{MAC_SRC} \d+\) )+)?(\[%{INTF_SRC}\] )?FWLOG: \[%{INT}\] WAL_DBGID_DEV_RESET \( 0x1, 0x[01], 0x1 \)$",
          "^\[\s*\d+\.\d+\] ((badsta\? \(atf descs %{MAC_SRC} \d+\) )+)?(\[%{INTF_SRC}\] )?FWLOG: \[%{INT}\] WAL_DBGID_DEV_RX_TIMEOUT \( 0x3, 0x49d, 0x8 \)$",
          "^\[\s*\d+\.\d+\] ((badsta\? \(atf descs %{MAC_SRC} \d+\) )+)?(\[%{INTF_SRC}\] )?FWLOG: \[%{INT}\] WAL_DBGID_DEV_TX_TIMEOUT \( 0x[12459] \)$",
          "^\[\s*\d+\.\d+\] ((badsta\? \(atf descs %{MAC_SRC} \d+\) )+)?(\[%{INTF_SRC}\] )?FWLOG: \[%{INT}\] WAL_DBGID_STA_KICKOUT \( %{BASE16NUM} \)$",
          "^\[\s*\d+\.\d+\] ((badsta\? \(atf descs %{MAC_SRC} \d+\) )+)?(\[%{INTF_SRC}\] )?FWLOG: \[%{INT}\] WAL_DBGID_STA_VDEV_XRETRY \( %{BASE16NUM}, %{BASE16NUM}, %{BASE16NUM}, %{BASE16NUM} \)$",
          "^\[\s*\d+\.\d+\] ((badsta\? \(atf descs %{MAC_SRC} \d+\) )+)?(\[%{INTF_SRC}\] )?FWLOG: \[%{INT}\] WHAL_ERROR_RECV_STOPPCU \( %{BASE16NUM}, %{BASE16NUM} \)$",
          "^\[\s*\d+\.\d+\] ((badsta\? \(atf descs %{MAC_SRC} \d+\) )+)?(\[%{INTF_SRC}\] )?FWLOG: \[%{INT}\] WHAL_ERROR_RESET_CHANNF1 \(  \)$",
          "^\[\s*\d+\.\d+\] ((badsta\? \(atf descs %{MAC_SRC} \d+\) )+)?(\[%{INTF_SRC}\] )?FWLOG: \[%{INT}\] WHAL_ERROR_RESET_PM \(  \)$",
          "^\[\s*\d+\.\d+\] ((badsta\? \(atf descs %{MAC_SRC} \d+\) )+)?(\[%{INTF_SRC}\] )?FWLOG: \[%{INT}\] vap-%{INT} AP PS: AID=%{INT} detected out-of-sync now=%{INT} tx_waiting=%{INT} txq_depth=%{INT}$",
          "^\[\s*\d+\.\d+\] ((badsta\? \(atf descs %{MAC_SRC} \d+\) )+)?(\[%{INTF_SRC}\] )?wmi_unified_event_rx : no registered event handler : event id %{BASE16NUM}",
          "^\[\s*\d+\.\d+\] ((badsta\? \(atf descs %{MAC_SRC} \d+\) )+)?ath_tx_sched_aggr: Recovering from error condition: Flushing TID queue until head\s+is within the window$",
          "^\[\s*\d+\.\d+\] ABORT LOOP finsihsed for Q: \d+, num_pending: \d+ $",
          "^\[\s*\d+\.\d+\] Interference detected$",
          "^\[\s*\d+\.\d+\] STOPPED EVENT for vap \d+ \(%{BASE16NUM}\)$",
          "^\[\s*\d+\.\d+\] \[%{INTF_SRC}\] FWLOG: \[%{INT}\] BEACON_EVENT_SWBA_SEND_FAILED \( 0x[123] \)$",
          "^\[\s*\d+\.\d+\] ar9300_abort_tx_dma\[\d+\]: ar9300_stop_dma_receive failed$",
          "^\[\s*\d+\.\d+\] ar9300_handle_radar_bb_panic: BB status=%{BASE16NUM} rifs=[01] - disable$",
          "^\[\s*\d+\.\d+\] ar9300_reset\[\d+\]: ar9300_stop_dma_receive failed$",
          "^\[\s*\d+\.\d+\] ath_tx_sched_aggr: Recovering from error condition: Flushing TID queue until head\s+is within the window$",
          "^\[\s*\d+\.\d+\] ieee80211_ioctl_set_ratelimit: failed to find specified node with aid %{INT}$",
          "^\[\s*\d+\.\d+\] osif_vap_init: Timeout waiting for vap to stop\.\.\.returning$",
          "^\[\s*\d+\.\d+\] ubnt_calc_airtime_average\[%{PID}\] tick counter wrapped, time_delta:%{INT}$",
          "^\[\s*\d+\.\d+\]\s+Could not find the peer\s*$",
          "^\[\s*\d+\.\d+\]\s+Unable to process [TR]X info\s*$",
          "^\[\s*\d+\.\d+\]\s+ieee80211_ioctl_kickmac\[%{INT}\]",
          "^\[truncated\] \[\s*\d+\.\d+\] (badsta\? \(atf descs %{MAC_SRC} \d+\) )+%{DATA}$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Warning" ]
        match => { "message" => [
          "^\[\s*\d+\.\d+\] kernel msg: ebtables bug: please report to author: Wrong nr of counters$",
          "^\[\s*\d+\.\d+\] net_ratelimit: %{INT} callbacks suppressed$",
          "^\[\s*\d+\.\d+\] rx_clear=%{INT}, rx_frame=%{INT}, tx_frame=%{INT}$",
          "^\[\s*\d+\.\d+\] wlan_bsteering_measure_chan_util: Already waiting for utilization, VAP is not ready, or bsschan is invalid on band %{INT}: %{BASE16NUM}$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Premature exit: Terminated by signal$",
          "^\[\s*\d+\.\d+\]  \(spectral_attach : %{INT}\)$",
          "^\[\s*\d+\.\d+\] %{INTF_DST}: no IPv6 routers present$",
          "^\[\s*\d+\.\d+\] %{INTF_DST}: port \d+\(%{INTF_SRC}\) entered (forwarding|disabled) state\s*$",
          "^\[\s*\d+\.\d+\] %{INTF_SRC}: link up \([14]0+Mbps\/(Full|Half) duplex\)$",
          "^\[\s*\d+\.\d+\] (\+|-)HWT$",
          "^\[\s*\d+\.\d+\] (\[%{INTF_SRC}\] )+FWLOG: \[%{INT}\] WAL_DBGID_TX_BA_SETUP \( %{BASE16NUM}, %{BASE16NUM}, %{BASE16NUM}, %{BASE16NUM}, %{BASE16NUM} \)$",
          "^\[\s*\d+\.\d+\] (\[%{INTF_SRC}\] )+FWLOG: \[%{INT}\]\s+WAL_DBGID_SECURITY_[MU]CAST_KEY_SET \( %{BASE16NUM} \)$",
          "^\[\s*\d+\.\d+\] (\[%{INTF_SRC}\] )*ieee80211_ioctl_set_ratelimit: node with (aid|ni_associd) \d+ and mac %{MAC_SRC} has been tagged (for|non) rate-limiting$",
          "^\[\s*\d+\.\d+\] Add VHT80 channel: %{INT}$",
          "^\[\s*\d+\.\d+\] Atheros AR8216/AR8236/AR8316 ag71xx-mdio\.0:00: Port %{INT} is (up|down)$",
          "^\[\s*\d+\.\d+\] CE_per_engine_handler_adjust, base=%{BASE16NUM} offset=%{BASE16NUM}$",
          "^\[\s*\d+\.\d+\] CE_pkt_dl_len_set CE %{INT} Pkt download length %{INT}$",
          "^\[\s*\d+\.\d+\] CE_recv_buf_enqueue %{INT} CE %{INT} wi %{INT} dest_ptr %{BASE16NUM} nbytes %{INT} recv_ctxt %{BASE16NUM}$",
          "^\[\s*\d+\.\d+\] CE_recv_buf_enqueue %{INT} Populate last entry %{INT} for CE %{INT}$",
          "^\[\s*\d+\.\d+\] CPU_INTR_ADDRESS = \[%{INT}\]$",
          "^\[\s*\d+\.\d+\] DCS: ol_ath_disable_dcsim dcs state 0$",
          "^\[\s*\d+\.\d+\] Enable ATF for DA\s*$",
          "^\[\s*\d+\.\d+\] FIRMWARE:ATF PEER REQ: NUM-PEERS: \d+$",
          "^\[\s*\d+\.\d+\] FIRMWARE:P %{INT} V %{INT} T %{INT}$",
          "^\[\s*\d+\.\d+\] FIRMWARE:_wlan_rtt_enable$",
          "^\[\s*\d+\.\d+\] HAL_CAP_(PHYDIAG|RADAR|SPECTRAL_SCAN)\s+: Capable$",
          "^\[\s*\d+\.\d+\] HTC Service:%{BASE16NUM} ep:%{INT} TX flow control disabled$",
          "^\[\s*\d+\.\d+\] Initializing Pktlogs for 11ac$",
          "^\[\s*\d+\.\d+\] LARGE_AP enabled. num_peers %{INT}, num_vdevs %{INT}, num_tids %{INT}, lteu_support %{INT}$",
          "^\[\s*\d+\.\d+\] Notification to UMAC VAP layer$",
          "^\[\s*\d+\.\d+\] OL Resmgr Init-ed$",
          "^\[\s*\d+\.\d+\] OL radio tx stuck detected$",
          "^\[\s*\d+\.\d+\] OL vap_(start|stop) [+-]$",
          "^\[\s*\d+\.\d+\] Rx_Filter : \[0\]$",
          "^\[\s*\d+\.\d+\] SOC_GLOBAL_RESET_ADDRESS = \[0\]$",
          "^\[\s*\d+\.\d+\] SOC_RESET_CONTROL_ADDRESS : 800$",
          "^\[\s*\d+\.\d+\] SPECTRAL : Need to fix the capablity check for (RADAR \(spectral_attach : %{INT}\)|SPECTRAL)$",
          "^\[\s*\d+\.\d+\] SPECTRAL : get_(capability|tsf64) not registered$",
          "^\[\s*\d+\.\d+\] Set freq vap %{INT} stop send -%{BASE16NUM}$",
          "^\[\s*\d+\.\d+\] Set freq vap %{INT} stop send \+ %{BASE16NUM}$",
          "^\[\s*\d+\.\d+\] Set wait done --%{BASE16NUM}$",
          "^\[\s*\d+\.\d+\] Skipping VHT80 channel %{INT}$",
          "^\[\s*\d+\.\d+\] Target:%{BASE16NUM} HTC Service:%{BASE16NUM}, ULpipe:%{INT} DLpipe:%{INT} id:%{INT} Ready$",
          "^\[\s*\d+\.\d+\] VAP device %{INTF_SRC} created osifp: \(%{BASE16NUM}\) os_if: \(%{BASE16NUM}\)$",
          "^\[\s*\d+\.\d+\] \(spectral_attach : %{INT}\)$",
          "^\[\s*\d+\.\d+\] \[%{INTF_SRC}\] FWLOG: \[%{INT}\] ANI Enable:  %{INT}$",
          "^\[\s*\d+\.\d+\] \[%{INTF_SRC}\] FWLOG: \[%{INT}\] WAL_DBGID_SECURITY_ALLOW_DATA \( %{BASE16NUM} \)$",
          "^\[\s*\d+\.\d+\] \[%{INTF_SRC}\] FWLOG: \[%{INT}\] WAL_DBGID_SECURITY_ENCR_EN \(  \)$",
          "^\[\s*\d+\.\d+\] \[%{INTF_SRC}\] FWLOG: \[%{INT}\] WAL_DBGID_TX_AC_BUFFER_SET \( %{BASE16NUM}, 0x1e, 0x460, 0x460, 0x0 \)$",
          "^\[\s*\d+\.\d+\] \[%{INTF_SRC}\]( \[%{INTERFACENAME}\])? FWLOG: \[%{INT}\] RATE: ChainMask [13], phymode 10444(84|86|89|90), ni_flags 0x0[02][02][0123][13b]00[26], vht_mcs_set 0x(0000|00ff|fffa|fffe|ffff), ht_mcs_set 0x(00|ff)ff, legacy_rate_set %{BASE16NUM}$",
          "^\[\s*\d+\.\d+\] \[%{INTF_SRC}\]( \[%{INTERFACENAME}\])? FWLOG: \[%{INT}\] WAL_DBGID_SET_HW_FILTER \( %{BASE16NUM} \)$",
          "^\[\s*\d+\.\d+\] __ol_ath_attach: hard_header_len reservation %{INT}$",
          "^\[\s*\d+\.\d+\] __ol_ath_attach: init tx/rx TODO$",
          "^\[\s*\d+\.\d+\] ath_attach_dfs\[%{PID}\] dfsdomain %{INT}$",
          "^\[\s*\d+\.\d+\] ath_tx_sched_aggr: TID\[\d+\] seq_start:\d+ seq_next:\d+ Head:\d+ Tail:\d+ BAW size:\d+ seqno:\d+$",
          "^\[\s*\d+\.\d+\] bypasswmi : %{INT}$",
          "^\[\s*\d+\.\d+\] chunk %{INT} len %{INT} requested ,ptr  %{BASE16NUM}$",
          "^\[\s*\d+\.\d+\] ht_cap_info: : %{BASE16NUM}$",
          "^\[\s*\d+\.\d+\] idx %{INT} req %{INT}  num_units %{INT} num_unit_info %{INT} unit size %{INT} actual units %{INT}$",
          "^\[\s*\d+\.\d+\] ieee80211_bsteering_attach: Band steering initialized$",
          "^\[\s*\d+\.\d+\] ieee80211_mac_nfbypass_globalinit called %{INT} time\(s\)$",
          "^\[\s*\d+\.\d+\] num_rf_chain : %{INT}$",
          "^\[\s*\d+\.\d+\] ol_ath_attach: Calling ol_if_dfs_configure$",
          "^\[\s*\d+\.\d+\] ol_ath_attach\(\) UMAC attach .$",
          "^\[\s*\d+\.\d+\] ol_ath_attach\(\) WMI attached. wmi_handle %{BASE16NUM}$",
          "^\[\s*\d+\.\d+\] ol_ath_attach\(\) connect HTC.$",
          "^\[\s*\d+\.\d+\] ol_ath_connect_htc\(\) WMI is ready$",
          "^\[\s*\d+\.\d+\] ol_ath_phyerr_attach: called$",
          "^\[\s*\d+\.\d+\] ol_ath_rtt_meas_report_attach: called$",
          "^\[\s*\d+\.\d+\] ol_ath_set_host_app_area TODO$",
          "^\[\s*\d+\.\d+\] ol_ath_vap_join: join operation is only for STA/IBSS mode$",
          "^\[\s*\d+\.\d+\] ol_ath_wmm_update:$",
          "^\[\s*\d+\.\d+\] ol_if_dfs_attach: called; ptr=%{BASE16NUM}, radar_info=%{BASE16NUM}$",
          "^\[\s*\d+\.\d+\] ol_if_dfs_configure: UNINIT domain$",
          "^\[\s*\d+\.\d+\] ol_if_dfs_configure: called$",
          "^\[\s*\d+\.\d+\] ol_if_dfs_disable: called$",
          "^\[\s*\d+\.\d+\] ol_if_dfs_setup: called$",
          "^\[\s*\d+\.\d+\] ol_if_spectral_setup$",
          "^\[\s*\d+\.\d+\] ol_regdmn_init_channels: !avail mode %{BASE16NUM} \(0x[248](0+)?\) flags %{BASE16NUM}$",
          "^\[\s*\d+\.\d+\] ol_regdmn_start: reg-domain param: regdmn=0, countryName=, wModeSelect=FFFFFFFF, netBand=FFFFFFFF, extendedChanMode=0\.$",
          "^\[\s*\d+\.\d+\] ol_scan_cancel for \(%{BASE16NUM}\)$",
          "^\[\s*\d+\.\d+\] ol_txrx_pdev_attach: %{INT} tx desc's allocated ; range starts from %{BASE16NUM}$",
          "^\[\s*\d+\.\d+\] ol_vdev_start_resp_ev for vap \d+ \(%{BASE16NUM}\)$",
          "^\[\s*\d+\.\d+\] reset_countdown ((ignor|start)ed|after %{INT} seconds: %{INT})$",
          "^\[\s*\d+\.\d+\] setting antenna gain to 0$",
          "^\[\s*\d+\.\d+\] spectral_init_netlink 65 NULL SKB$",
          "^\[\s*\d+\.\d+\] storing global reference to ieee80211com object$",
          "^\[\s*\d+\.\d+\] target uses HTT version 2\.1; host uses 2\.1$",
          "^\[\s*\d+\.\d+\] ubnt_calc_airtime_average\[1382\] tick counter wrapped, time_delta:\d+\s*$",
          "^\[\s*\d+\.\d+\] vht_cap_info : 338001b2$",
          "^\[\s*\d+\.\d+\] vht_supp_mcs : 0000fffa$",
          "^\[\s*\d+\.\d+\] wlan_get_active_vport_chan: ch=\d+\s*$",
          "^\[\s*\d+\.\d+\] wlan_vap_create : (enter|exit)\. devhandle=0x81430380, opmode=IEEE80211_M_HOSTAP, flags=0x801$",
          "^\[\s*\d+\.\d+\] wlan_vap_create : exit. devhandle=0x81430380, opmode=IEEE80211_M_HOSTAP, flags=0x801.$",
          "^\[\s*\d+\.\d+\] wmi_ready_event_rx:  WMI UNIFIED READY event$",
          "^\[\s*\d+\.\d+\] wmi_service_ready_event_rx:  WMI UNIFIED SERVICE READY event$",
          "^\[\s*\d+\.\d+\] wmi_unified_vdev_(start|stop|up)_send for vap \d+ \(%{BASE16NUM}\)$"
        ] }
      }
      if [message] =~ /^\[\s*\d+\.\d+\]\s*$/ {
        drop { }
      }
    } else if ( [syslog][identifier] == "syslog" or [syslog][identifier] == "libubnt" ) {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^ace_reporter\.process_inform_response\(\): Failed to get the decrypted data from custom alert response$",
          "^ace_reporter\.reporter_fail\(\): (Not Adopted|Server Busy|Timeout|Unable to resolve|Unreachable|Waiting for IP) \(%{URI}\)$",
          "^ace_reporter\.reporter_fail\(\): (inform|initial contact) failed #%{POSINT} \(last inform: %{POSINT} seconds ago\), rc=%{POSINT}$",
          "^ace_reporter\.reporter_fail\(\): Decrypt Error \(%{URI}\)$",
          "^ace_reporter\.reporter_fail\(\): Unknown\[%{POSINT}\] \(%{URI}\)$",
          "^ace_reporter\.reporter_fail\(\): \[STATE\] entering SELFRUN!!!!$",
          "^ace_reporter\.reporter_fail\(\): initial contact failed #%{POSINT}, url=%{URI}, rc=%{POSINT}$",
          "^libubnt\.get_ieee80211req_sta_info\(\): IOCTL_STA_INFO2 failed: No such file or directory$",
          "^mca-client\.service\(\): Failed sending request to '%{PATH}' - 'Resource temporarily unavailable'$",
          "^mca-ctrl.do_monitor\(\): \[event\] fatal radio error detected, resetting$",
          "^mcagent_data\.data_decrypt\(\): header too small\. size=%{POSINT}, should be=%{POSINT}$",
          "^ubntevent\.update\(\): fatal chip error detected on %{INTF_SRC}$",
          "^wevent\.wevent_receive\(\): netlink: recvfrom failed: No buffer space available$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^ace_reporter\.reporter_connected\(\): connect\(%{URI}\) failed with errors: %{DATA}$",
          "^ace_reporter\.reporter_handle_response\(\): \[reboot\] reboot$",
          "^ace_reporter\.reporter_handle_response\(\): \[setparam\] applying new system.cfg$",
          "^ace_reporter\.reporter_handle_response\(\): cfgversion: %{BASE16NUM} -> %{BASE16NUM}$",
          "^ace_reporter\.reporter_next_inform_method\(\): next inform family: %{POSINT}$",
          "^ace_reporter\.reporter_next_inform_url\(\): next inform url\[%{INT}\]=%{URI}$",
          "^ace_reporter\.reporter_set_managed\(\): \[STATE\] enter MANAGED$",
          "^downlink-monitor\.periodic_update\(\): ap\[%{MAC_SRC}, %{IP_SRC}\] is ip-ready, adopting\.\.\.$",
          "^dpi\.dpi_stainfo_notify\(\): dpi not enable$",
          "^libubnt_webrtc.close_sdp_session\(\): SDP close: uuid<[0-9a-f-]+>$",
          "^libubnt_webrtc.get_next_sdp_offer\(\): SDP request: uuid<[0-9a-f-]+>, stun<%{HOST_DST}:%{PORT_DST}>, turn<>$",
          "^libubnt_webrtc\.set_sdp_answer\(\): SDP answer: uuid<[0-9a-f-]+>, answer<%{DATA}>$",
          "^libubnt_webrtc\.set_sdp_answer\(\): SDP success: uuid<[0-9a-f-]+>$",
          "^mca-monitor\.do_monitor\(\): mcad\.checkin is %{INT} ago \(max=%{INT}\)$",
          "^mca-monitor\.do_monitor\(\): mcad\.setparam in progress, elapsed=%{INT} \(max=%{INT}\)$",
          "^mca-monitor\.do_monitor\(\): rc\.stopping in progress, elapsed=%{INT} \(max=%{INT}\)$",
          "^process '/bin/dropbear -F -d /var/run/dropbear_dss_host_key -r /var/run/dropbear_rsa_host_key -p 22' \(pid %{PID}\) exited\. Scheduling for restart\.$",
          "^process '/bin/tinysnmpd /etc/snmp\.conf /lib/tinysnmp' \(pid %{PID}\) exited\. Scheduling for restart\.$",
          "^process '/sbin/udhcpc -f -i br0 -V ubnt -A 10 -s /etc/udhcpc/udhcpc -p /var/run/udhcpc.br0.pid -h \"%{DATA}\"' \(pid %{PID}\) exited. Scheduling for restart\.$",
          "^redirector:serv\.server_sm\(\): HTTP running: %{INT}$",
          "^redirector:serv\.destroy_server\(\): server stopped$",
          "^redirector\.sigint_handler\(\): receive signal %{INT}$",
          "^ubnt_protocol\.ubnt_usr1_handler\(\): Get DHCP IP$",
          "^uplink-monitor\.uplink_monitor_main\(\): (serial|vport %{INTF_SRC}): %{MAC_SRC}$",
          "^wevent\.ubnt_custom_event\(\): EVENT_STA_IP %{INTF_SRC}: %{MAC_SRC} / %{IP_SRC}$",
          "^wevent\.ubnt_custom_event\(\): EVENT_STA_(JOIN|LEAVE) %{INTF_SRC}: %{MAC_SRC} / %{INT}$"
        ] }
      }
    } else if [syslog][identifier] == "syswrapper" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^current time is not set yet$",
          "^ipready\.%{INTF_DST} = %{IP_DST}$",
          "^hostapd update: conf=%{FILENAME_DST} iterface=%{INTF_SRC} nas_ip=%{IP} res=OK$",
          "^\[busy\] skipping: reload$",
          "^\[state is locked\] skipping reload$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^kill-linkcheck\. reason: linkcheck not updating$"
        ] }
      }
    } else if ( [syslog][identifier] == "syslog" or [syslog][identifier] == "stamgr" ) {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^downlink-monitor\.periodic_update\(\): ap\[%{MAC_SRC}, %{IP_SRC}\] is ip-ready, adopting\.\.\.$",
          "^kick-sta-on %{MAC_SRC} %{INTF_SRC} \(reason:On (other VAP|Ethernet/Wired)\)$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^libubnt\.get_ieee80211req_sta_info\(\): IOCTL_STA_INFO2 failed: No such file or directory$"
        ] }
      }
    } else if [syslog][identifier] == "switch" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^DOT1S: Port \(%{POSINT}\) inst\(%{POSINT}\) role changing from ROLE_(DESIGNATED|DISABLED) to ROLE_(DESIGNATED|DISABLED)$",
          "^TRAPMGR: Link (Down|Up): %{POSINT}/%{POSINT}$"
        ] }
      }
    } else if [syslog][identifier] == "init" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^The system is going down NOW\!$",
          "^process '/sbin/ntpclient -i 86400 -n -s -c 0 -l -h %{INT}\.ubnt\.pool\.ntp.org' \(pid %{INT}\) exited\. Scheduling for restart\.$",
          "^reloading /etc/inittab$",
          "^starting pid %{POSINT:[syslog][pid]}, tty '': '/bin/umount -a -r'$",
          "^starting pid %{POSINT:[syslog][pid]}, tty '': '/etc/rc.d/rc ministop'$",
          "^starting pid %{POSINT:[syslog][pid]}, tty '/dev/null': '/sbin/ntpclient -i 86400 -n -s -c 0 -l -h 0\.ubnt\.pool\.ntp\.org'$"
        ] }
      }
    } else if [syslog][identifier] == "dropbear" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^Child connection from %{IP_SRC}:%{PORT_SRC}$",
          "^Exit \(%{USER_DST}\): Disconnect received$",
          "^Exit before auth: Exited normally$",
          "^Login attempt for nonexistent user from %{IP_SRC}:%{PORT_SRC}$",
          "^Password auth succeeded for '%{USER_DST}' from %{IP_SRC}:%{PORT_SRC}$",
          "^Pubkey auth attempt with unknown algo for 'admin' from %{IP_SRC}:%{PORT_SRC}$"
        ] }
      }
    }
  }
  if ( [type] == "syslog" or [type] == "cee" ) and [syslog][hostname] =~ /^[Ff]irewall/ {
    mutate {
      add_field => { "application" => "Ubiquiti" }
      replace => { "type" => "syslog" }
    }
    if [syslog][identifier] == "CRON" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^pam_unix\(cron:session\): session closed for user root$",
          "^pam_unix\(cron:session\): session opened for user root( by \(uid=0\))?$"
        ] }
      }
    }
    if [syslog][identifier] == "/USR/SBIN/CRON" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^\(root\) CMD \(test -x /usr/sbin/anacron || \( cd / && run-parts --report /etc/cron\.(hourly|daily|weekly|monthly) \)\)$",
          "^\(root\) CMD \(   cd / && run-parts --report /etc/cron\.(hourly|daily|weekly|monthly)\)$",
          "^\(root\) CMD \(/etc/php5/cleanup-sessions\)$",
          "^\(root\) CMD \(/usr/bin/syswrapper\.sh unifi-monitor > /dev/null 2>&1\)$"
        ] }
      }
    }
    if [syslog][identifier] == "ddclient" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Warning" ]
        match => { "message" => [
          "^WARNING: skipping update of %{HOST_SRC} from <%{DATA}> to %{IP_DST}\.$",
          "^WARNING: last updated <%{DATA}> but last attempt on %{DATESTAMP_OTHER} failed\.$",
          "^WARNING: Wait at least 5 minutes between update attempts\.$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^FAILED:   updating %{HOST_SRC}: badauth: Bad authorization \(username or password\)$"
        ] }
      }
    }
    if [syslog][identifier] == "dhcpd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^DHCPACK on %{IP_SRC} to %{MAC_SRC} (\(%{DATA:[host][src][hostname]}\) )?via %{INTF_DST}$",
          "^DHCPACK to %{IP_DST} \(%{MAC_DST}\) via %{INTF_SRC}$",
          "^DHCPDISCOVER from %{MAC_SRC} (\(%{DATA:[host][src][hostname]}\) )?via %{INTF_DST}$",
          "^DHCPINFORM from %{IP_SRC} via %{INTF_DST}$",
          "^DHCPOFFER on %{IP_SRC} to %{MAC_SRC} (\(%{DATA:[host][src][hostname]}\) )?via %{INTF_DST}$",
          "^DHCPRELEASE of %{IP_SRC} from %{MAC_SRC} \(%{DATA}\) via %{INTF_DST}( \(found\))?$",
          "^DHCPREQUEST for %{IP_SRC} (\(%{IP_DST}\) )?from %{MAC_SRC} (\(%{DATA:[host][src][hostname]}\) )?via %{INTF_DST}$",
          "^Wrote %{INT} (class|deleted host|new dynamic host) decls to leases file\.$",
          "^Wrote %{INT} leases to leases file\.$",
          "^execute_statement argv\[\d+\] = .*$",
          "^uid lease %{IP_SRC} for client %{MAC_SRC} is duplicate on %{DATA}$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Warning" ]
        match => { "message" => [
          "^Abandoning IP address %{IP_DST}: pinged before offer$",
          "^ICMP Echo reply while lease %{IP_DST} valid.$",
          "^unexpected ICMP Echo Reply from %{IP_SRC}$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "DHCPREQUEST for %{IP_SRC} from %{MAC_SRC} via %{INTF_DST}: unknown lease %{IP}\.",
          "^data: hardware: raw packet not available$",
          "^execute: bad arg %{INT}$"
        ] }
      }
    }
    if [syslog][identifier] == "linkcheck" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^speedtest\.getBestServer\(\): Socket connect$",
          "^linkcheck\.launch_speedtest\(\): launching speedtest$",
          "^linkcheck\.run_speedtest\(\): Completed: Downlink %{BASE10NUM} Mbps, Uplink %{BASE10NUM} Mbps$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error", "Benign" ]
        match => { "message" => [
          "^speedtest\.downloadTest\(\): Socket read -1$",
          "^speedtest\.getBestServer\(\): Socket Read -1$",
          "^speedtest\.getBestServer\(\): no such host #012$",
          "^speedtest\.uploadTest\(\): Socket write -1$"
        ] }
      }
    }
    if [syslog][identifier] == "mca-monitor" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^mca-monitor\.do_monitor\(\): mcad\.getparam in progress, elapsed=%{INT} \(max=%{INT}\)$"
        ] }
      }
    }
    if [syslog][identifier] == "mcad" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^ace_reporter\.reporter_next_inform_url\(\): next inform url\[%{INT}\]=%{URI}$",
          "^ace_reporter\.reporter_set_managed\(\): \[STATE\] enter MANAGED$",
          "^mca-edgemax-api\.edgemax_do_service\(\): Got no response within %{BASE10NUM} seconds$",
          "^mca-edgemax\.edgemax_stats_routes\(\): parsing response failed\(%{INT}\)$",
          "^perl_wrapper\.open_with_timeout\(\): opened /var/run/perl_wrapper_re(q|sp)_fifo$",
          "^perl_wrapper\.perl_request_response\(\): error reading SOM$",
          "^perl_wrapper\.read_with_timeout\(\): timeout on select\(\) for response pipe$",
          "^perl_wrapper\.perl_request_response\(\): exit with ret 32$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Warning" ]
        match => { "message" => [
          "^ace_reporter\.reporter_handle_response\(\): Speed Test already running$",
          "^dpi\.dpi_pktinfo_send\(\): failed to send UGW wevent \(len:%{INT}\), Network is unreachable#012$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^ace_reporter\.reporter_connected\(\): connect\(%{URI}\) failed with errors: %{INT} - Connection refused$",
          "^ace_reporter\.reporter_fail\(\): Server Busy \(%{URI}\)$",
          "^ace_reporter\.reporter_fail\(\): Timeout \(%{URI}\)$",
          "^ace_reporter\.reporter_fail\(\): Unable to resolve \(%{URI}\)$",
          "^ace_reporter\.reporter_fail\(\): Unknown\[%{POSINT}\] \(%{URI}\)$",
          "^ace_reporter\.reporter_fail\(\): Unreachable \(%{URI}\)$",
          "^ace_reporter\.reporter_fail\(\): \[STATE\] entering SELFRUN!!!!$",
          "^ace_reporter\.reporter_fail\(\): inform failed #%{POSINT} \(last inform: %{POSINT} seconds ago\), rc=%{POSINT}$",
          "^ace_reporter\.reporter_fail\(\): initial contact failed #%{INT}, url=%{URI}, rc=%{INT}$"
        ] }
      }
    }
    if [syslog][identifier] == "rsyslogd" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^set SCM_CREDENTIALS failed on '/dev/log': Protocol not available$"
        ] }
      }
    } else if [syslog][identifier] == "syswrapper" {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Benign" ]
        match => { "message" => [
          "^current time is not set yet$",
          "^ipready\.%{INTF_DST} = %{IP_DST}$",
          "^hostapd update: conf=%{FILENAME_DST} iterface=%{INTF_SRC} nas_ip=%{IP} res=OK$",
          "^\[busy\] skipping: reload$",
          "^\[state is locked\] skipping reload$"
        ] }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag => [ "Known Message", "Error" ]
        match => { "message" => [
          "^kill-linkcheck\. reason: linkcheck not updating$"
        ] }
      }
    } 
  }
  if ( [type] == "syslog" or [type] == "cee" ) and [syslog][identifier] == "sudo" and [message] =~ /on-dhcp-event/ { 
    grok {
      patterns_dir => [ "/etc/logstash/patterns.d/" ]
      add_tag => [ "DHCP-Event" ]
      tag_on_failure => [ ]
      match => { "message" => [
        "^%{USER_SRC} : TTY=[a-zA-Z0-9/]+ ; PWD=%{PATH:[files][src][filename]} ; USER=%{USER_DST} ; COMMAND=%{PATH:[files][dst][filename]} -c echo -e \'%{IP:[dhcp][client][ip]}\\\\t %{NOTSPACE:[dhcp][client][hostname]}\\\\t #on-dhcp-event %{MAC:[dhcp][client][mac]}\' >> /etc/hosts$"
      ] }
    }
  }
}
