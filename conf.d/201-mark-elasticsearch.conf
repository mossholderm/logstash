filter {
  if [syslog][identifier] == "elasticsearch" {
    grok {
      patterns_dir   => [ "/etc/logstash/patterns.d/" ]
      match => [ "message", "^%{ESLOGENTRY}$" ]
      overwrite => [ "message" ]
    }

    if "_grokparsefailure" not in [tags] {
      grok {  # regular logs
        overwrite => [ "message" ]
        tag_on_failure => []
        match => [
          "message", "^\[%{DATA:\[elasticsearch]\[node]}\]%{SPACE}\[%{DATA:\[elasticsearch]\[index]}\]%{SPACE}%{GREEDYDATA:message}$",
          "message", "^\[%{DATA:\[elasticsearch]\[node]}\]%{SPACE}%{GREEDYDATA:message}$" 
        ]
      }

      grok {  # slow logs
        tag_on_failure => []
        add_tag        => [ "elasticsearch-slowlog" ]
        match          => [ "message", "took\[%{DATA:\[elasticsearch]\[took]}\], took_millis\[%{NUMBER:\[elasticsearch]\[took_millis]}\], types\[%{DATA:\[elasticsearch]\[types]}\], stats\[%{DATA:\[elasticsearch]\[stats]}\], search_type\[%{DATA:\[elasticsearch]\[search_type]}\], total_shards\[%{NUMBER:\[elasticsearch]\[total_shards]}\], source\[%{DATA:\[elasticsearch]\[source_query]}\], extra_source\[%{DATA:\[elasticsearch]\[extra_source]}\]," ]
      }

      grok {
        patterns_dir   => [ "/etc/logstash/patterns.d/" ]
        tag_on_failure => [ ]
        add_tag        => [ "Known Message", "Benign" ]
        match          => { "message" => [
          "^%{ESGC}$",
          "^Cluster health status changed from \[RED\] to \[YELLOW\] \(reason: \[shards started \[\[%{DATA:\[elasticsearch]\[index]}\]\[\d+\]\] \.\.\.\]\)\.$",
          "^creating index, cause \[auto\(bulk api\)\], templates \[%{DATA:\[elasticsearch]\[templates]\], shards \[\d+\]/\[\d+\], mappings \[%{DATA:\[elasticsearch]\[mappings]}\]$",
          "^(update|create)_mapping \[%{DATA:\[elasticsearch]\[mapping]}\]$"
        ] }
      }
    }
    date { # use timestamp from the log
      tag_on_failure => [ "_dateparsefailure_elasticsearch" ]
      match  => [ "[@metadata][timestamp]", "YYYY-MM-dd HH:mm:ss,SSS", "YYYY-MM-dd HH:mm:ss" ]
    }
  }
}
