filter {
  if [type] == "apache_access" or [file] =~ /access_log$/ or [source] =~ /access_log$/ {
     mutate { 
       replace        => { "type" => "apache_access" }
    }
    if ![syslog][hostname] {
      mutate { 
        add_field      => { "[syslog][hostname]" => "%{received_from}" }
      }
    }
    grok {
      break_on_match => "false"
      patterns_dir   => [ "/etc/logstash/patterns.d/" ]
      match          => { "original"             => "%{KRB_APACHE_LOG}"
                          "[http][request][uri]" => "%{URIPATH:[http][request][path]}(%{URIPARAM:[@metadata][param_list]})?"
      }
    }

    if [http][request][uri] {
      mutate {
        replace => { "message" => "%{[http][request][uri]}" }
      }
    } else if [http][request][raw] {
      mutate {
        replace => { "message" => "%{[http][request][raw]}" }
      }
    }

    mutate {
      convert        => { 
                          "[http][response][code]"  => "integer" 
                          "[http][response][bytes]" => "integer" 
                        }
    }

    if [http][response][code] {
      if [http][request][uri] and [http][response][code] < 400 {
        grok {
          patterns_dir => [ "/etc/logstash/patterns.d/" ]
          tag_on_failure => [ ]
          add_tag => [ "Known Message", "Benign" ]
          match => { "[http][request][uri]" => [
            "^/$",
            "^/index.html$",
            "^/mod_pagespeed_beacon",
            "^/.well-known/caldav$",
            "^/.well-known/carddav$",
            "^\*$"
          ] }
        }
      }
      if [http][response][code] >= 400 and [http][response][code] < 408 {
        mutate {
          add_tag => [ "Known Message", "Possible Probe" ]
        }
      }
      if [http][response][code] == 408 or [http][response][code] == 412 {
        mutate {
          add_tag => [ "Known Message", "Benign" ]
        }
      } 
    }

    if [@metadata][param_list] {
      kv {
        source => "[@metadata][param_list]"
        target => "[http][request][params]"
        field_split => "?&"
      }
    }

    date {
      tag_on_failure => [ "_dateparsefailure_apache1" ]
      match          => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z", "dd/MMM/yyyy:HH:mm:ss.SSS Z" ]
    }
  }
  if [type] == "apache_error" or [file] =~ /error_log$/ {
    mutate {
      replace        => { "type" => "apache_error" } 
      add_field      => { "[syslog][hostname]" => "%{received_from}" }
    }
    grok {
      patterns_dir   => [ "/etc/logstash/patterns.d/" ]
      match          => [ "original", "%{APACHE_ERROR_LOG}" ]
    }
    date {
      tag_on_failure => ["_dateparsefailure_apache2" ]
      match          => [ "timestamp" , "EEE MMM dd HH:mm:ss.SSSSSS YYYY", "EEE MMM  d HH:mm:ss.SSSSSS YYYY" ]
    }
  }
}
